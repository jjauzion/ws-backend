schema {
  query: Query
  mutation: Mutation
}

scalar Time

type Error {
  code: Int!
  message: String!
}

type Token {
  username: String!
  token: String!
  userId: String!
}

union LoginRes = Token | Error
# query union types:
#query login{
#  login(id:"simple-user@email.com", pwd: "a-password") {
#    ... on Token {
#      username
#      token
#    }
#
#    ... on Error {
#      code
#      message
#    }
#  }
#}

type Task {
  id: ID!
  user_id: String!
  created_at: Time!
  started_at: Time!
  ended_at: Time!
  status: Status!
  job: Job!
}

enum Status {
  STATUSLESS
  FAILED
  NOT_STARTED
  RUNNING
  ENDED
  CANCELED
}

type Job {
  docker_image: String!
  dataset: String
}

input newTask {
  user_id: ID!
  docker_image: String!
  dataset: String
}

type User {
  id: ID!
  admin: Boolean!
  email: String!
  created_at: Time!
}

input newUser {
  email: String!
}

type Query {
  list_tasks(userId: String!): [Task]
  login(id: String!, pwd: String!): LoginRes!
}

type Mutation {
  create_user(input: newUser!): User!
  create_task(input: newTask!): Task!
}