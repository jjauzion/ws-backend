// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/jjauzion/ws-backend/db"
)

// MockDbal is a mock of Dbal interface.
type MockDbal struct {
	ctrl     *gomock.Controller
	recorder *MockDbalMockRecorder
}

// MockDbalMockRecorder is the mock recorder for MockDbal.
type MockDbalMockRecorder struct {
	mock *MockDbal
}

// NewMockDbal creates a new mock instance.
func NewMockDbal(ctrl *gomock.Controller) *MockDbal {
	mock := &MockDbal{ctrl: ctrl}
	mock.recorder = &MockDbalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbal) EXPECT() *MockDbalMockRecorder {
	return m.recorder
}

// CreateIndexes mocks base method.
func (m *MockDbal) CreateIndexes(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockDbalMockRecorder) CreateIndexes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockDbal)(nil).CreateIndexes), ctx)
}

// CreateTask mocks base method.
func (m *MockDbal) CreateTask(ctx context.Context, task db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockDbalMockRecorder) CreateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockDbal)(nil).CreateTask), ctx, task)
}

// CreateUser mocks base method.
func (m *MockDbal) CreateUser(ctx context.Context, user db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDbalMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDbal)(nil).CreateUser), ctx, user)
}

// DeleteTaskByID mocks base method.
func (m *MockDbal) DeleteTaskByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByID indicates an expected call of DeleteTaskByID.
func (mr *MockDbalMockRecorder) DeleteTaskByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByID", reflect.TypeOf((*MockDbal)(nil).DeleteTaskByID), ctx, id)
}

// DeleteTasksBysUserID mocks base method.
func (m *MockDbal) DeleteTasksBysUserID(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTasksBysUserID", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTasksBysUserID indicates an expected call of DeleteTasksBysUserID.
func (mr *MockDbalMockRecorder) DeleteTasksBysUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTasksBysUserID", reflect.TypeOf((*MockDbal)(nil).DeleteTasksBysUserID), ctx, userId)
}

// DeleteUser mocks base method.
func (m *MockDbal) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDbalMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDbal)(nil).DeleteUser), ctx, id)
}

// GetNextTask mocks base method.
func (m *MockDbal) GetNextTask(ctx context.Context) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextTask", ctx)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextTask indicates an expected call of GetNextTask.
func (mr *MockDbalMockRecorder) GetNextTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextTask", reflect.TypeOf((*MockDbal)(nil).GetNextTask), ctx)
}

// GetTasksByUserID mocks base method.
func (m *MockDbal) GetTasksByUserID(ctx context.Context, id string) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", ctx, id)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockDbalMockRecorder) GetTasksByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockDbal)(nil).GetTasksByUserID), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockDbal) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDbalMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDbal)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockDbal) GetUserByID(ctx context.Context, id string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDbalMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDbal)(nil).GetUserByID), ctx, id)
}

// NewConnection mocks base method.
func (m *MockDbal) NewConnection(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnection", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConnection indicates an expected call of NewConnection.
func (mr *MockDbalMockRecorder) NewConnection(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnection", reflect.TypeOf((*MockDbal)(nil).NewConnection), address)
}

// Ping mocks base method.
func (m *MockDbal) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDbalMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDbal)(nil).Ping))
}

// UpdateTaskStatus mocks base method.
func (m *MockDbal) UpdateTaskStatus(ctx context.Context, taskID string, status db.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", ctx, taskID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockDbalMockRecorder) UpdateTaskStatus(ctx, taskID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockDbal)(nil).UpdateTaskStatus), ctx, taskID, status)
}
